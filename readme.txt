二维码扫描系统

本地开发：
1. 安装Python 3.7+
2. 安装依赖：pip install -r requirements.txt
3. 运行服务器：python app.py
4. 访问：http://localhost:5000

部署说明：
1. Railway.app 部署：
   - 注册 Railway 账号
   - 连接 GitHub 仓库
   - 选择 Python 项目
   - 设置环境变量
   - 自动部署

2. Render.com 部署：
   - 注册 Render 账号
   - 连接 GitHub 仓库
   - 选择 Web Service
   - 设置构建命令：pip install -r requirements.txt
   - 设置启动命令：gunicorn app:app
   - 设置环境变量

功能说明：
- 支持多摄像头切换
- 支持Excel文件导入导出
- 支持二维码扫描和数据验证
- 自动保存扫描结果
- 支持多设备访问

注意事项：
1. 首次使用需要授予摄像头权限
2. 建议使用Chrome或Firefox浏览器
3. 确保网络连接稳定

使用说明：

1. 首次使用
   - 上传原始 Excel 文件，将作为数据模板
   - 文件会保存在服务器，不需要重复上传
   - 数据会保存在 MongoDB 数据库中

2. 日常使用
   - 直接打开网页即可使用
   - 扫描的数据会自动保存到数据库
   - 随时可以下载最新的完整数据文件

3. 特殊情况
   - 如果要更换模板文件，可以重新上传
   - 新上传的文件会覆盖原有模板
   - 历史扫描数据会保留在数据库中

注意：请不要手动删除服务器上的 template.xlsx 文件

数据存储说明：

1. 数据库存储（永久）：
   - 所有数据都保存在 MongoDB 数据库中
   - 数据永久保存，不会因为关闭程序而丢失
   - 包括：
     * 上传的 Excel 文件中的数据
     * 扫描添加的所有数据

2. 临时文件（临时）：
   - template.xlsx：保存在服务器上的模板文件
   - temp_export.xlsx：仅在下载时临时生成，下载后自动删除

3. 数据安全：
   - 即使服务器重启，数据库中的数据也不会丢失
   - 如果 template.xlsx 丢失，只需重新上传 Excel 文件即可
   - 所有扫描的历史数据都安全存储在数据库中

4. 数据恢复：
   - 如果不小心上传了错误的模板文件：
     * 只需重新上传正确的模板文件
     * 所有历史数据会按新模板格式重新生成
   - 数据库中的数据和模板文件是分开的：
     * 更换模板不会影响历史数据
     * 可以随时切换不同的模板文件

数据添加位置规则：

1. 扫描新数据时：
   - 系统会提取编号的前6位作为前缀
   - 例如：610424001 的前缀是 610424

2. 添加位置：
   - 系统会按照前缀分组
   - 新数据会添加到相同前缀的最后一条记录后面
   - 不同前缀的数据会分别添加到各自前缀组的末尾

3. 示例说明：
   - 如果扫描 610424099：会添加到其他 610424 开头数据的后面
   - 如果扫描 610425001：会添加到其他 610425 开头数据的后面
   - 每个前缀组都会保持自己的区域

4. 注意事项：
   - 新前缀的数据会在首次出现时创建新的分组区域
   - 相同前缀的数据会始终保持在一起
   - 这样可以保持数据的有序性和可读性

数据安全和恢复机制：

1. 数据永远安全：
   - 所有扫描的数据都存储在云端 MongoDB 数据库中
   - 数据不会因为任何操作而丢失
   - 包括：意外关机、覆盖模板文件、删除本地文件等

2. 下载机制：
   - 每次点击下载时，系统会：
     * 使用当前的模板文件作为基础
     * 从数据库读取所有历史数据
     * 按照前缀分组规则重新排列所有数据
     * 生成新的 Excel 文件

3. 即使出现问题：
   - 如果不小心覆盖了模板文件：重新上传正确的模板即可
   - 如果删除了本地文件：随时可以重新下载
   - 如果服务器重启：数据依然在数据库中
   
4. 关键点：
   - 不需要担心数据丢失
   - 随时可以下载最新的完整数据
   - 数据库中的记录才是"真实数据"
   - Excel 文件只是数据的一种展现形式

数据管理说明：

1. 数据清理方式：
   - 方式一：通过上传新的Excel文件
     * 上传新文件时选择"清除历史数据"选项
     * 会删除数据库中所有旧数据
     * 新上传的数据作为起始数据

   - 方式二：使用备份功能
     * 下载当前所有数据的备份
     * 选择"清除并备份"选项
     * 系统会先保存备份文件
     * 然后清除数据库中的数据

2. 注意事项：
   - 删除操作不可恢复
   - 建议在删除前先下载数据备份
   - 可以分阶段管理数据，定期清理

3. 建议的数据管理周期：
   - 每月或每季度进行一次数据备份
   - 备份后可以清理数据库
   - 保持合理的数据量